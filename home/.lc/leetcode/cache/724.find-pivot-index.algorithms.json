{"id":724,"fid":724,"name":"Find Pivot Index","slug":"find-pivot-index","link":"https://leetcode.com/problems/find-pivot-index/description/","percent":40.572083499311624,"level":"Easy","category":"algorithms","totalAC":"58.1K","totalSubmit":"143.1K","desc":"Given an array of integers nums, write a method that returns the \"pivot\" index of this array.\r\n\r\nWe define the pivot index as the index where the sum of the numbers to the left of the index is equal to the sum of the numbers to the right of the index.\r\n\r\nIf no such index exists, we should return -1. If there are multiple pivot indexes, you should return the left-most pivot index.\r\n\r\nExample 1:\r\n\r\n\r\nInput: \r\nnums = [1, 7, 3, 6, 5, 6]\r\nOutput: 3\r\nExplanation: \r\nThe sum of the numbers to the left of index 3 (nums[3] = 6) is equal to the sum of numbers to the right of index 3.\r\nAlso, 3 is the first index where this occurs.\r\n\r\n\r\n \r\n\r\nExample 2:\r\n\r\n\r\nInput: \r\nnums = [1, 2, 3]\r\nOutput: -1\r\nExplanation: \r\nThere is no index that satisfies the conditions in the problem statement.\r\n\r\n\r\n \r\n\r\nNote:\r\n\r\n\r\n\tThe length of nums will be in the range [0, 10000].\r\n\tEach element nums[i] will be an integer in the range [-1000, 1000].\r\n\r\n\r\n \r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    int pivotIndex(vector<int>& nums) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\r\n    public int pivotIndex(int[] nums) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def pivotIndex(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def pivotIndex(self, nums: List[int]) -> int:\n        "},{"value":"c","text":"C","defaultCode":"int pivotIndex(int* nums, int numsSize) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public int PivotIndex(int[] nums) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number[]} nums\n * @return {number}\n */\nvar pivotIndex = function(nums) {\n    \n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} nums\n# @return {Integer}\ndef pivot_index(nums)\n    \nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\r\n    func pivotIndex(_ nums: [Int]) -> Int {\r\n\r\n    }\r\n}"},{"value":"golang","text":"Go","defaultCode":"func pivotIndex(nums []int) int {\n    \n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\r\n    def pivotIndex(nums: Array[Int]): Int = {\r\n        \r\n    }\r\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\r\n    fun pivotIndex(nums: IntArray): Int {\r\n        \r\n    }\r\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\r\n    pub fn pivot_index(nums: Vec<i32>) -> i32 {\r\n        \r\n    }\r\n}"},{"value":"php","text":"PHP","defaultCode":"class Solution {\r\n\r\n    /**\r\n     * @param Integer[] $nums\r\n     * @return Integer\r\n     */\r\n    function pivotIndex($nums) {\r\n        \r\n    }\r\n}"}],"testcase":"[1,7,3,6,5,6]","testable":true,"templateMeta":{"name":"pivotIndex","params":[{"name":"nums","type":"integer[]"}],"return":{"type":"integer"}}}