{"id":206,"fid":206,"name":"Reverse Linked List","slug":"reverse-linked-list","link":"https://leetcode.com/problems/reverse-linked-list/description/","percent":52.89988861562679,"level":"Easy","category":"algorithms","totalAC":"522.9K","totalSubmit":"988.5K","desc":"Reverse a singly linked list.\r\n\r\nExample:\r\n\r\n\r\nInput: 1->2->3->4->5->NULL\r\nOutput: 5->4->3->2->1->NULL\r\n\r\n\r\nFollow up:\r\n\r\nA linked list can be reversed either iteratively or recursively. Could you implement both?\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"/**\r\n * Definition for singly-linked list.\r\n * struct ListNode {\r\n *     int val;\r\n *     ListNode *next;\r\n *     ListNode(int x) : val(x), next(NULL) {}\r\n * };\r\n */\r\nclass Solution {\r\npublic:\r\n    ListNode* reverseList(ListNode* head) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"/**\r\n * Definition for singly-linked list.\r\n * public class ListNode {\r\n *     int val;\r\n *     ListNode next;\r\n *     ListNode(int x) { val = x; }\r\n * }\r\n */\r\nclass Solution {\r\n    public ListNode reverseList(ListNode head) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def reverseList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def reverseList(self, head: ListNode) -> ListNode:\n        "},{"value":"c","text":"C","defaultCode":"/**\r\n * Definition for singly-linked list.\r\n * struct ListNode {\r\n *     int val;\r\n *     struct ListNode *next;\r\n * };\r\n */\r\nstruct ListNode* reverseList(struct ListNode* head) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"/**\r\n * Definition for singly-linked list.\r\n * public class ListNode {\r\n *     public int val;\r\n *     public ListNode next;\r\n *     public ListNode(int x) { val = x; }\r\n * }\r\n */\r\npublic class Solution {\r\n    public ListNode ReverseList(ListNode head) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @return {ListNode}\n */\nvar reverseList = function(head) {\n    \n};"},{"value":"ruby","text":"Ruby","defaultCode":"# Definition for singly-linked list.\n# class ListNode\n#     attr_accessor :val, :next\n#     def initialize(val)\n#         @val = val\n#         @next = nil\n#     end\n# end\n\n# @param {ListNode} head\n# @return {ListNode}\ndef reverse_list(head)\n    \nend"},{"value":"swift","text":"Swift","defaultCode":"/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public var val: Int\n *     public var next: ListNode?\n *     public init(_ val: Int) {\n *         self.val = val\n *         self.next = nil\n *     }\n * }\n */\nclass Solution {\n    func reverseList(_ head: ListNode?) -> ListNode? {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"/**\n * Definition for singly-linked list.\n * type ListNode struct {\n *     Val int\n *     Next *ListNode\n * }\n */\nfunc reverseList(head *ListNode) *ListNode {\n    \n}"},{"value":"scala","text":"Scala","defaultCode":"/**\r\n * Definition for singly-linked list.\r\n * class ListNode(var _x: Int = 0) {\r\n *   var next: ListNode = null\r\n *   var x: Int = _x\r\n * }\r\n */\r\nobject Solution {\r\n    def reverseList(head: ListNode): ListNode = {\r\n        \r\n    }\r\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"/**\n * Example:\n * var li = ListNode(5)\n * var v = li.`val`\n * Definition for singly-linked list.\n * class ListNode(var `val`: Int) {\n *     var next: ListNode? = null\n * }\n */\nclass Solution {\n    fun reverseList(head: ListNode?): ListNode? {\n        \n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"// Definition for singly-linked list.\n// #[derive(PartialEq, Eq, Debug)]\n// pub struct ListNode {\n//   pub val: i32,\n//   pub next: Option<Box<ListNode>>\n// }\n// \n// impl ListNode {\n//   #[inline]\n//   fn new(val: i32) -> Self {\n//     ListNode {\n//       next: None,\n//       val\n//     }\n//   }\n// }\nimpl Solution {\n    pub fn reverse_list(head: Option<Box<ListNode>>) -> Option<Box<ListNode>> {\n        \n    }\n}"},{"value":"php","text":"PHP","defaultCode":"/**\n * Definition for a singly-linked list.\n * class ListNode {\n *     public $val = 0;\n *     public $next = null;\n *     function __construct($val) { $this->val = $val; }\n * }\n */\nclass Solution {\n\n    /**\n     * @param ListNode $head\n     * @return ListNode\n     */\n    function reverseList($head) {\n        \n    }\n}"}],"testcase":"[1,2,3,4,5]","testable":true,"templateMeta":{"name":"reverseList","params":[{"name":"head","type":"ListNode","dealloc":false}],"return":{"type":"ListNode","dealloc":true}}}