extends javascript

snippet mod "Creates a new module" !b
module $1 {
	$0
}
endsnippet

snippet interface "Creates a new interface" !b
interface $1 {
	$0
}
endsnippet

snippet method "Creates a new method" !b
${3:public }$1($4) : ${5:void} {
	$0
}
endsnippet

snippet import "Adds a new TypeScript import" !b
import ${1/((\.\.?\/)*(\w+\/)*)?(\w+)/$4/} = require("$1");
endsnippet

snippet if "Creates an if statement and optionally puts text in it" !b
if (${1:condition}) {
	${VISUAL}$0
}`!p import vim; vim.command("normal =i{") `
endsnippet

snippet var "var NAME: TYPE = expr;"
var ${1:#:NAME}: ${2:#:TYPE} = ${0:#:TARGET};
endsnippet

snippet class "class NAME {...}"
class ${1:#:NAME} {
  constructor(${2:#:Args}) {
    ${3:#:TARGET}
  }

${0:#:TARGET}
}
endsnippet

snippet accessor "Getter & Setter"
get ${1:#:NAME}(): ${2:#:TYPE} {
	${3:#:TARGET}
}

set $1(${4:value}: $2) {
	${0:#:TARGET}
}
endsnippet

snippet static "static f(){}"
static ${1:#:NAME}(${2:#:Args}) {
	${0:#:TARGET}
}
endsnippet

snippet enum "enum NAME {...}"
enum ${1:#:NAME} {
	${0:#:TARGET}
}
endsnippet

snippet namespace "namespace NAME {...}"
namespace ${1:#:NAME} {
	${0:#:TARGET}
}
endsnippet

snippet function-arrow "() => {}"
(${1:#:Args}) => { ${0:#:TARGET} }
endsnippet

# converted from https://github.com/Shougo/neosnippet-snippets/blob/master/neosnippets/typescript.snip
