[alias]
  co = checkout
  st = status
  br = branch

  lol = log --graph --decorate --pretty=oneline --abbrev-commit --color
  unstage = reset HEAD
  mylog = log --pretty=format:'%h %ad | %s%d [%an]' --graph --date=short --color
  lola = log --graph --decorate --pretty=oneline --abbrev-commit --all --color
  mylog2 = log --pretty=format:"[%h] %ae, %ar: %s" --stat
  aliases = config --get-regexp '^alias\\.'

  # View abbreviated SHA, description, and history graph of the latest 20 commits
  l = log --pretty=oneline -n 20 --graph --abbrev-commit

  # View the current working tree status using the short format
  s = status -s

  # Show the diff between the latest commit and the current state
  d = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"

  # Clone a repository including all submodules
  c = clone --recursive

  # Commit all changes
  ca = !git add -A && git commit -av

  # Switch to a branch, creating it if necessary
  go = "!f() { git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; }; f"

  # Show verbose output about tags, branches or remotes
  tags = tag -l
  branches = branch -a
  remotes = remote -v

  # Amend the currently staged files to the latest commit
  amend = commit --amend --reuse-message=HEAD

  # Remove the old tag with this name and tag the latest commit with it.
  retag = "!r() { git tag -d $1 && git push origin :refs/tags/$1 && git tag $1; }; r"

  # Find branches containing commit
  fb = "!f() { git branch -a --contains $1; }; f"

  # Find tags containing commit
  ft = "!f() { git describe --always --contains $1; }; f"

  # Find commits by source code
  fc = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"

  # Find commits by commit message
  fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"

  # Remove branches that have already been merged with master
  # a.k.a. ‘delete merged’
  dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"

  # List contributors with number of commits
  contributors = shortlog --summary --numbered

[apply]
  # Detect whitespace errors when applying a patch
  whitespace = fix

[core]
  editor = vim
  quotepath = false

  # Use custom `.gitignore` and `.gitattributes`
  excludesfile = ~/.gitignore_global
  attributesfile = ~/.gitattributes_global

  # Treat spaces before tabs and all kinds of trailing whitespace as an error
  # [default] trailing-space: looks for spaces at the end of a line
  # [default] space-before-tab: looks for spaces before tabs at the beginning of a line
  whitespace = space-before-tab,-indent-with-non-tab,trailing-space

  # Make `git rebase` safer on macOS
  # More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
  trustctime = false
  autocrlf = input
	fsmonitor = True

[color]
  # Use colors in Git commands that are capable of colored output when
  # outputting to the terminal. (This is the default setting in Git ≥ 1.8.4.)
  ui = auto
	diff = auto
	status = auto
	branch = auto

[color "branch"]
  current = yellow reverse
  local = yellow
  remote = green

[color "diff"]
  meta = yellow bold
  frag = magenta bold # line info
  old = red # deletions
  new = green # additions

[color "status"]
  added = yellow
  changed = green
  untracked = cyan

[commit]
  # https://help.github.com/articles/signing-commits-using-gpg/
  gpgsign = false

[diff]
  # Detect copies as well as renames
  renames = copies
  tool = Kaleidoscope

[difftool "Kaleidoscope"]
  cmd = ksdiff --partial-changeset --relative-path \"$MERGED\" -- \"$LOCAL\" \"$REMOTE\"

[difftool]
  prompt = false

[mergetool "Kaleidoscope"]
  cmd = ksdiff --merge --output \"$MERGED\" --base \"$BASE\" -- \"$LOCAL\" --snapshot \"$REMOTE\" --snapshot
  trustExitCode = true

[mergetool]
  prompt = false

[help]
  # Automatically correct and execute mistyped commands
  autocorrect = 1

[merge]
  # Include summaries of merged commits in newly created merge commit messages
  log = true
  tool = Kaleidoscope

[push]
  # Use the Git 1.x.x default to avoid errors on machines with old Git
  # installations. To use `simple` instead, add this to your `~/.extra` file:
  # `git config --global push.default simple`. See http://git.io/mMah-w.
  default = simple
  # Make `git push` push relevant annotated tags when pushing branches out.
  followTags = true

[user]
  name = Daniel Blancas
	email = edblancas@gmail.com
  signingkey = 7CC41AD13FF90E67

[credential]
  helper = cache

[includeIf "gitdir:~/dev/nu/"]
  path = ~/dev/nu/.gitconfig_include
[filter "lfs"]
	smudge = git-lfs smudge --skip %f
	process = git-lfs filter-process --skip
	required = True
	clean = git-lfs clean -- %f
[url "git@github.com:"]
	insteadOf = git://github.com/
[includeIf "gitdir:/Users/daniel.blancas/dev/nu/"]
	path = /Users/daniel.blancas/.nugitconfig
